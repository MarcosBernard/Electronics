

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Apr 28 13:34:49 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0006                     	;# 
   185  0007                     	;# 
   186  0008                     	;# 
   187  0009                     	;# 
   188  000A                     	;# 
   189  000B                     	;# 
   190  000C                     	;# 
   191  000D                     	;# 
   192  000E                     	;# 
   193  000E                     	;# 
   194  000F                     	;# 
   195  0010                     	;# 
   196  0011                     	;# 
   197  0012                     	;# 
   198  0013                     	;# 
   199  0014                     	;# 
   200  0015                     	;# 
   201  0015                     	;# 
   202  0016                     	;# 
   203  0017                     	;# 
   204  0018                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001B                     	;# 
   208  001B                     	;# 
   209  001C                     	;# 
   210  001D                     	;# 
   211  001E                     	;# 
   212  001F                     	;# 
   213  0081                     	;# 
   214  0085                     	;# 
   215  0086                     	;# 
   216  0087                     	;# 
   217  0088                     	;# 
   218  0089                     	;# 
   219  008C                     	;# 
   220  008D                     	;# 
   221  008E                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0093                     	;# 
   225  0094                     	;# 
   226  0098                     	;# 
   227  0099                     	;# 
   228  009C                     	;# 
   229  009D                     	;# 
   230  009E                     	;# 
   231  009F                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  010F                     	;# 
   236  018C                     	;# 
   237  018D                     	;# 
   238                           
   239                           	psect	idataCOMMON
   240  0650                     __pidataCOMMON:
   241                           
   242                           ;initializer for _CGRAM1
   243  0650  340A               	retlw	10
   244  0651  340A               	retlw	10
   245  0652  340A               	retlw	10
   246  0653  340A               	retlw	10
   247  0654  3400               	retlw	0
   248  0655  3411               	retlw	17
   249  0656  340E               	retlw	14
   250  0657  3400               	retlw	0
   251  0008                     _PORTDbits	set	8
   252  0008                     _PORTD	set	8
   253  0006                     _PORTB	set	6
   254  0088                     _TRISD	set	136
   255  0086                     _TRISB	set	134
   256                           
   257                           	psect	strings
   258  0003                     __pstrings:
   259  0003                     stringtab:
   260  0003                     __stringtab:
   261  0003                     stringcode:	
   262                           ;	String table - string pointers are 1 byte each
   263                           
   264  0003                     stringdir:
   265  0003  3000               	movlw	high stringdir
   266  0004  008A               	movwf	10
   267  0005  0804               	movf	4,w
   268  0006  0A84               	incf	4,f
   269  0007  0782               	addwf	2,f
   270  0008                     __stringbase:
   271  0008  3400               	retlw	0
   272  0009                     __end_of__stringtab:
   273  0009                     STR_1:
   274  0009  3450               	retlw	80	;'P'
   275  000A  3472               	retlw	114	;'r'
   276  000B  3475               	retlw	117	;'u'
   277  000C  3465               	retlw	101	;'e'
   278  000D  3462               	retlw	98	;'b'
   279  000E  3461               	retlw	97	;'a'
   280  000F  3420               	retlw	32	;' '
   281  0010  3433               	retlw	51	;'3'
   282  0011  3400               	retlw	0
   283                           
   284                           	psect	cinit
   285  07CB                     start_initialization:	
   286                           ; #config settings
   287                           
   288  07CB                     __initialization:
   289                           
   290                           ; Initialize objects allocated to COMMON
   291  07CB  120A  118A  2650  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   292  07D0  00F0               	movwf	__pdataCOMMON& (0+127)
   293  07D1  120A  118A  2651  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   294  07D6  00F1               	movwf	(__pdataCOMMON+1)& (0+127)
   295  07D7  120A  118A  2652  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   296  07DC  00F2               	movwf	(__pdataCOMMON+2)& (0+127)
   297  07DD  120A  118A  2653  120A  118A  	fcall	__pidataCOMMON+3	;fetch initializer
   298  07E2  00F3               	movwf	(__pdataCOMMON+3)& (0+127)
   299  07E3  120A  118A  2654  120A  118A  	fcall	__pidataCOMMON+4	;fetch initializer
   300  07E8  00F4               	movwf	(__pdataCOMMON+4)& (0+127)
   301  07E9  120A  118A  2655  120A  118A  	fcall	__pidataCOMMON+5	;fetch initializer
   302  07EE  00F5               	movwf	(__pdataCOMMON+5)& (0+127)
   303  07EF  120A  118A  2656  120A  118A  	fcall	__pidataCOMMON+6	;fetch initializer
   304  07F4  00F6               	movwf	(__pdataCOMMON+6)& (0+127)
   305  07F5  120A  118A  2657  120A  118A  	fcall	__pidataCOMMON+7	;fetch initializer
   306  07FA  00F7               	movwf	(__pdataCOMMON+7)& (0+127)
   307                           
   308                           ; Clear objects allocated to COMMON
   309  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   310  07FC                     end_of_initialization:	
   311                           ;End of C runtime variable initialization code
   312                           
   313  07FC                     __end_of__initialization:
   314  07FC  0183               	clrf	3
   315  07FD  120A  118A  2ED3   	ljmp	_main	;jump to C main() function
   316                           
   317                           	psect	bssCOMMON
   318  007D                     __pbssCOMMON:
   319  007D                     _direccion_DDRAM:
   320  007D                     	ds	1
   321                           
   322                           	psect	dataCOMMON
   323  0070                     __pdataCOMMON:
   324  0070                     _CGRAM1:
   325  0070                     	ds	8
   326                           
   327                           	psect	inittext
   328  0658                     init_fetch0:	
   329                           ;	Called with low address in FSR and high address in W
   330                           
   331  0658  087E               	movf	btemp,w
   332  0659  008A               	movwf	10
   333  065A  087F               	movf	btemp+1,w
   334  065B  0082               	movwf	2
   335  065C                     init_ram0:	
   336                           ;Called with:
   337                           ;	high address of idata address in btemp 
   338                           ;	low address of idata address in btemp+1 
   339                           ;	low address of data in FSR
   340                           ;	high address + 1 of data in btemp-1
   341                           
   342  065C  120A  118A  2658  120A  118A  	fcall	init_fetch0
   343  0661  0080               	movwf	0
   344  0662  0A84               	incf	4,f
   345  0663  0804               	movf	4,w
   346  0664  067D               	xorwf	btemp+-1,w
   347  0665  1903               	btfsc	3,2
   348  0666  3400               	retlw	0
   349  0667  0AFF               	incf	btemp+1,f
   350  0668  1903               	btfsc	3,2
   351  0669  0AFE               	incf	btemp,f
   352  066A  2E5C               	goto	init_ram0
   353                           
   354                           	psect	cstackCOMMON
   355  0078                     __pcstackCOMMON:
   356  0078                     ?_LCD_Init:
   357  0078                     ??_LCD_Init:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0078                     ?_escribir_comando:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0078                     ??_escribir_comando:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0078                     ?_escribir_cadena:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0078                     ?_escribir_caracter_especial:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0078                     ?_escribir_caracter:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0078                     ??_escribir_caracter:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0078                     ?_leer_direccion_DDRAM:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0078                     ??_leer_direccion_DDRAM:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0078                     ?_main:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0078                     ?_LCD_delay:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0078                     ??_LCD_delay:	
   391                           ; 1 bytes @ 0x0
   392                           
   393                           
   394                           ; 1 bytes @ 0x0
   395  0078                     	ds	1
   396  0079                     escribir_comando@comando:
   397  0079                     escribir_caracter@caracter:	
   398                           ; 1 bytes @ 0x1
   399                           
   400                           
   401                           ; 1 bytes @ 0x1
   402  0079                     	ds	1
   403  007A                     ??_escribir_cadena:
   404  007A                     ??_escribir_caracter_especial:	
   405                           ; 1 bytes @ 0x2
   406                           
   407                           
   408                           ; 1 bytes @ 0x2
   409  007A                     	ds	1
   410  007B                     escribir_cadena@cadena:
   411  007B                     escribir_caracter_especial@DirCGRAM:	
   412                           ; 1 bytes @ 0x3
   413                           
   414                           
   415                           ; 1 bytes @ 0x3
   416  007B                     	ds	1
   417  007C                     escribir_cadena@i:
   418  007C                     escribir_caracter_especial@i:	
   419                           ; 1 bytes @ 0x4
   420                           
   421                           
   422                           ; 1 bytes @ 0x4
   423  007C                     	ds	1
   424  007D                     ??_main:
   425                           
   426                           	psect	maintext
   427  06D3                     __pmaintext:	
   428                           ; 1 bytes @ 0x5
   429 ;;
   430 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   431 ;;
   432 ;; *************** function _main *****************
   433 ;; Defined at:
   434 ;;		line 5 in file "MAIN.c"
   435 ;; Parameters:    Size  Location     Type
   436 ;;		None
   437 ;; Auto vars:     Size  Location     Type
   438 ;;		None
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : B00/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   448 ;;      Params:         0       0       0       0       0
   449 ;;      Locals:         0       0       0       0       0
   450 ;;      Temps:          0       0       0       0       0
   451 ;;      Totals:         0       0       0       0       0
   452 ;;Total ram usage:        0 bytes
   453 ;; Hardware stack levels required when called: 3
   454 ;; This function calls:
   455 ;;		_LCD_Init
   456 ;;		_escribir_cadena
   457 ;;		_escribir_caracter
   458 ;;		_escribir_caracter_especial
   459 ;;		_escribir_comando
   460 ;;		_leer_direccion_DDRAM
   461 ;; This function is called by:
   462 ;;		Startup code after reset
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466  06D3                     _main:	
   467                           ;psect for function _main
   468                           
   469  06D3                     l806:	
   470                           ;incstack = 0
   471                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   472                           
   473                           
   474                           ;MAIN.c: 7:     LCD_Init();
   475  06D3  120A  118A  266B  120A  118A  	fcall	_LCD_Init
   476  06D8                     l808:
   477                           
   478                           ;MAIN.c: 8:     TRISB = 0x00;
   479  06D8  1683               	bsf	3,5	;RP0=1, select bank1
   480  06D9  1303               	bcf	3,6	;RP1=0, select bank1
   481  06DA  0186               	clrf	6	;volatile
   482  06DB                     l810:
   483                           
   484                           ;MAIN.c: 9:     PORTB = 0x00;
   485  06DB  1283               	bcf	3,5	;RP0=0, select bank0
   486  06DC  1303               	bcf	3,6	;RP1=0, select bank0
   487  06DD  0186               	clrf	6	;volatile
   488                           
   489                           ;MAIN.c: 11:     escribir_comando(0b00001111);
   490  06DE  300F               	movlw	15
   491  06DF  120A  118A  2702  120A  118A  	fcall	_escribir_comando
   492  06E4                     l812:
   493                           
   494                           ;MAIN.c: 13:     escribir_cadena("Prueba 3");
   495  06E4  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   496  06E5  120A  118A  2682  120A  118A  	fcall	_escribir_cadena
   497  06EA                     l814:
   498                           
   499                           ;MAIN.c: 15:     escribir_caracter_especial(0b00000000);
   500  06EA  3000               	movlw	0
   501  06EB  120A  118A  26A4  120A  118A  	fcall	_escribir_caracter_especial
   502                           
   503                           ;MAIN.c: 16:     escribir_caracter(0);
   504  06F0  3000               	movlw	0
   505  06F1  120A  118A  2740  120A  118A  	fcall	_escribir_caracter
   506                           
   507                           ;MAIN.c: 18:     PORTB = leer_direccion_DDRAM();
   508  06F6  120A  118A  2784  120A  118A  	fcall	_leer_direccion_DDRAM
   509  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   510  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   511  06FD  0086               	movwf	6	;volatile
   512  06FE                     l25:	
   513                           ;MAIN.c: 20:     while(1);
   514                           
   515  06FE                     l26:
   516  06FE  2EFE               	goto	l25
   517  06FF  120A  118A  2800   	ljmp	start
   518  0702                     __end_of_main:
   519                           
   520                           	psect	text1
   521  06A4                     __ptext1:	
   522 ;; *************** function _escribir_caracter_especial *****************
   523 ;; Defined at:
   524 ;;		line 44 in file "LCD16x2.c"
   525 ;; Parameters:    Size  Location     Type
   526 ;;  DirCGRAM        1    wreg     PTR unsigned char 
   527 ;;		 -> NULL(0), 
   528 ;; Auto vars:     Size  Location     Type
   529 ;;  DirCGRAM        1    3[COMMON] PTR unsigned char 
   530 ;;		 -> NULL(0), 
   531 ;;  i               1    4[COMMON] unsigned char 
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   541 ;;      Params:         0       0       0       0       0
   542 ;;      Locals:         2       0       0       0       0
   543 ;;      Temps:          1       0       0       0       0
   544 ;;      Totals:         3       0       0       0       0
   545 ;;Total ram usage:        3 bytes
   546 ;; Hardware stack levels used: 1
   547 ;; Hardware stack levels required when called: 2
   548 ;; This function calls:
   549 ;;		_escribir_caracter
   550 ;;		_escribir_comando
   551 ;;		_leer_direccion_DDRAM
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557  06A4                     _escribir_caracter_especial:	
   558                           ;psect for function _escribir_caracter_especial
   559                           
   560                           
   561                           ;incstack = 0
   562                           ; Regs used in _escribir_caracter_especial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   563                           ;escribir_caracter_especial@DirCGRAM stored from wreg
   564  06A4  00FB               	movwf	escribir_caracter_especial@DirCGRAM
   565  06A5                     l770:
   566                           
   567                           ;LCD16x2.c: 45:     direccion_DDRAM = leer_direccion_DDRAM();
   568  06A5  120A  118A  2784  120A  118A  	fcall	_leer_direccion_DDRAM
   569  06AA  00FA               	movwf	??_escribir_caracter_especial
   570  06AB  087A               	movf	??_escribir_caracter_especial,w
   571  06AC  00FD               	movwf	_direccion_DDRAM
   572  06AD                     l772:
   573                           
   574                           ;LCD16x2.c: 46:     escribir_comando(0b01000000|*DirCGRAM);
   575  06AD  087B               	movf	escribir_caracter_especial@DirCGRAM,w
   576  06AE  0084               	movwf	4
   577  06AF  1383               	bcf	3,7	;select IRP bank0
   578  06B0  0800               	movf	0,w
   579  06B1  3840               	iorlw	64
   580  06B2  120A  118A  2702  120A  118A  	fcall	_escribir_comando
   581  06B7                     l774:
   582                           
   583                           ;LCD16x2.c: 47:     for(char i = 0; i<8;i++){
   584  06B7  01FC               	clrf	escribir_caracter_especial@i
   585  06B8                     l780:
   586                           
   587                           ;LCD16x2.c: 48:  escribir_caracter(CGRAM1[i]);
   588  06B8  087C               	movf	escribir_caracter_especial@i,w
   589  06B9  3E70               	addlw	(low (_CGRAM1| 0))& (0+255)
   590  06BA  0084               	movwf	4
   591  06BB  0800               	movf	0,w
   592  06BC  120A  118A  2740  120A  118A  	fcall	_escribir_caracter
   593  06C1                     l782:
   594                           
   595                           ;LCD16x2.c: 49:     }
   596  06C1  3001               	movlw	1
   597  06C2  00FA               	movwf	??_escribir_caracter_especial
   598  06C3  087A               	movf	??_escribir_caracter_especial,w
   599  06C4  07FC               	addwf	escribir_caracter_especial@i,f
   600  06C5                     l784:
   601  06C5  3008               	movlw	8
   602  06C6  027C               	subwf	escribir_caracter_especial@i,w
   603  06C7  1C03               	skipc
   604  06C8  2ECA               	goto	u51
   605  06C9  2ECB               	goto	u50
   606  06CA                     u51:
   607  06CA  2EB8               	goto	l780
   608  06CB                     u50:
   609  06CB                     l786:
   610                           
   611                           ;LCD16x2.c: 50:     escribir_comando(0b10000000|direccion_DDRAM);
   612  06CB  087D               	movf	_direccion_DDRAM,w
   613  06CC  3880               	iorlw	128
   614  06CD  120A  118A  2702  120A  118A  	fcall	_escribir_comando
   615  06D2                     l66:
   616  06D2  0008               	return
   617  06D3                     __end_of_escribir_caracter_especial:
   618                           
   619                           	psect	text2
   620  0784                     __ptext2:	
   621 ;; *************** function _leer_direccion_DDRAM *****************
   622 ;; Defined at:
   623 ;;		line 34 in file "LCD16x2.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;		None
   626 ;; Auto vars:     Size  Location     Type
   627 ;;		None
   628 ;; Return value:  Size  Location     Type
   629 ;;                  1    wreg      unsigned char 
   630 ;; Registers used:
   631 ;;		wreg, status,2, status,0, pclath, cstack
   632 ;; Tracked objects:
   633 ;;		On entry : 0/0
   634 ;;		On exit  : 0/0
   635 ;;		Unchanged: 0/0
   636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   637 ;;      Params:         0       0       0       0       0
   638 ;;      Locals:         0       0       0       0       0
   639 ;;      Temps:          2       0       0       0       0
   640 ;;      Totals:         2       0       0       0       0
   641 ;;Total ram usage:        2 bytes
   642 ;; Hardware stack levels used: 1
   643 ;; Hardware stack levels required when called: 1
   644 ;; This function calls:
   645 ;;		_LCD_delay
   646 ;; This function is called by:
   647 ;;		_main
   648 ;;		_escribir_caracter_especial
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652  0784                     _leer_direccion_DDRAM:	
   653                           ;psect for function _leer_direccion_DDRAM
   654                           
   655  0784                     l716:	
   656                           ;incstack = 0
   657                           ; Regs used in _leer_direccion_DDRAM: [wreg+status,2+status,0+pclath+cstack]
   658                           
   659                           
   660                           ;LCD16x2.c: 35:     TRISD=0x0F;
   661  0784  300F               	movlw	15
   662  0785  1683               	bsf	3,5	;RP0=1, select bank1
   663  0786  1303               	bcf	3,6	;RP1=0, select bank1
   664  0787  0088               	movwf	8	;volatile
   665  0788                     l718:
   666                           
   667                           ;LCD16x2.c: 36:     PORTDbits.RD6=1; LCD_delay();PORTDbits.RD7=1;LCD_delay();
   668  0788  1283               	bcf	3,5	;RP0=0, select bank0
   669  0789  1303               	bcf	3,6	;RP1=0, select bank0
   670  078A  1708               	bsf	8,6	;volatile
   671  078B                     l720:
   672  078B  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   673  0790                     l722:
   674  0790  1283               	bcf	3,5	;RP0=0, select bank0
   675  0791  1303               	bcf	3,6	;RP1=0, select bank0
   676  0792  1788               	bsf	8,7	;volatile
   677  0793                     l724:
   678  0793  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   679  0798                     l726:
   680                           
   681                           ;LCD16x2.c: 37:     direccion_DDRAM=((PORTD&0x0F)<<4)&0xF0;
   682  0798  1283               	bcf	3,5	;RP0=0, select bank0
   683  0799  1303               	bcf	3,6	;RP1=0, select bank0
   684  079A  0808               	movf	8,w	;volatile
   685  079B  390F               	andlw	15
   686  079C  00F8               	movwf	??_leer_direccion_DDRAM
   687  079D  3003               	movlw	3
   688  079E                     u35:
   689  079E  1003               	clrc
   690  079F  0DF8               	rlf	??_leer_direccion_DDRAM,f
   691  07A0  3EFF               	addlw	-1
   692  07A1  1D03               	skipz
   693  07A2  2F9E               	goto	u35
   694  07A3  1003               	clrc
   695  07A4  0D78               	rlf	??_leer_direccion_DDRAM,w
   696  07A5  39F0               	andlw	240
   697  07A6  00F9               	movwf	??_leer_direccion_DDRAM+1
   698  07A7  0879               	movf	??_leer_direccion_DDRAM+1,w
   699  07A8  00FD               	movwf	_direccion_DDRAM
   700  07A9                     l728:
   701                           
   702                           ;LCD16x2.c: 38:     PORTDbits.RD7=0;LCD_delay();PORTDbits.RD7=1;LCD_delay();
   703  07A9  1388               	bcf	8,7	;volatile
   704  07AA                     l730:
   705  07AA  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   706  07AF                     l732:
   707  07AF  1283               	bcf	3,5	;RP0=0, select bank0
   708  07B0  1303               	bcf	3,6	;RP1=0, select bank0
   709  07B1  1788               	bsf	8,7	;volatile
   710  07B2                     l734:
   711  07B2  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   712  07B7                     l736:
   713                           
   714                           ;LCD16x2.c: 39:     direccion_DDRAM=(PORTD&0x0F)|direccion_DDRAM;
   715  07B7  1283               	bcf	3,5	;RP0=0, select bank0
   716  07B8  1303               	bcf	3,6	;RP1=0, select bank0
   717  07B9  0808               	movf	8,w	;volatile
   718  07BA  390F               	andlw	15
   719  07BB  047D               	iorwf	_direccion_DDRAM,w
   720  07BC  00F8               	movwf	??_leer_direccion_DDRAM
   721  07BD  0878               	movf	??_leer_direccion_DDRAM,w
   722  07BE  00FD               	movwf	_direccion_DDRAM
   723  07BF                     l738:
   724                           
   725                           ;LCD16x2.c: 40:     PORTDbits.RD7=0;PORTDbits.RD6=0;LCD_delay();
   726  07BF  1388               	bcf	8,7	;volatile
   727  07C0                     l740:
   728  07C0  1308               	bcf	8,6	;volatile
   729  07C1                     l742:
   730  07C1  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   731  07C6                     l744:
   732                           
   733                           ;LCD16x2.c: 41:     TRISD=0x00;
   734  07C6  1683               	bsf	3,5	;RP0=1, select bank1
   735  07C7  1303               	bcf	3,6	;RP1=0, select bank1
   736  07C8  0188               	clrf	8	;volatile
   737  07C9                     l746:
   738                           
   739                           ;LCD16x2.c: 42:     return(direccion_DDRAM);
   740  07C9  087D               	movf	_direccion_DDRAM,w
   741  07CA                     l61:
   742  07CA  0008               	return
   743  07CB                     __end_of_leer_direccion_DDRAM:
   744                           
   745                           	psect	text3
   746  0702                     __ptext3:	
   747 ;; *************** function _escribir_comando *****************
   748 ;; Defined at:
   749 ;;		line 15 in file "LCD16x2.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;  comando         1    wreg     unsigned char 
   752 ;; Auto vars:     Size  Location     Type
   753 ;;  comando         1    1[COMMON] unsigned char 
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, status,2, status,0, pclath, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   763 ;;      Params:         0       0       0       0       0
   764 ;;      Locals:         1       0       0       0       0
   765 ;;      Temps:          1       0       0       0       0
   766 ;;      Totals:         2       0       0       0       0
   767 ;;Total ram usage:        2 bytes
   768 ;; Hardware stack levels used: 1
   769 ;; Hardware stack levels required when called: 1
   770 ;; This function calls:
   771 ;;		_LCD_delay
   772 ;; This function is called by:
   773 ;;		_main
   774 ;;		_escribir_caracter_especial
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778  0702                     _escribir_comando:	
   779                           ;psect for function _escribir_comando
   780                           
   781                           
   782                           ;incstack = 0
   783                           ; Regs used in _escribir_comando: [wreg+status,2+status,0+pclath+cstack]
   784                           ;escribir_comando@comando stored from wreg
   785  0702  00F9               	movwf	escribir_comando@comando
   786  0703                     l660:
   787                           
   788                           ;LCD16x2.c: 16:     PORTD = (comando>>4)&0x0F;
   789  0703  0879               	movf	escribir_comando@comando,w
   790  0704  00F8               	movwf	??_escribir_comando
   791  0705  3004               	movlw	4
   792  0706                     u15:
   793  0706  1003               	clrc
   794  0707  0CF8               	rrf	??_escribir_comando,f
   795  0708  3EFF               	addlw	-1
   796  0709  1D03               	skipz
   797  070A  2F06               	goto	u15
   798  070B  0878               	movf	??_escribir_comando,w
   799  070C  390F               	andlw	15
   800  070D  1283               	bcf	3,5	;RP0=0, select bank0
   801  070E  1303               	bcf	3,6	;RP1=0, select bank0
   802  070F  0088               	movwf	8	;volatile
   803  0710                     l662:
   804                           
   805                           ;LCD16x2.c: 17:     LCD_delay();PORTDbits.RD7 = 1;LCD_delay();PORTDbits.RD7 = 0;LCD_dela
      +                          y();
   806  0710  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   807  0715                     l664:
   808  0715  1283               	bcf	3,5	;RP0=0, select bank0
   809  0716  1303               	bcf	3,6	;RP1=0, select bank0
   810  0717  1788               	bsf	8,7	;volatile
   811  0718                     l666:
   812  0718  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   813  071D                     l668:
   814  071D  1283               	bcf	3,5	;RP0=0, select bank0
   815  071E  1303               	bcf	3,6	;RP1=0, select bank0
   816  071F  1388               	bcf	8,7	;volatile
   817  0720                     l670:
   818  0720  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   819  0725                     l672:
   820                           
   821                           ;LCD16x2.c: 18:     PORTD = (comando)&0x0F;
   822  0725  0879               	movf	escribir_comando@comando,w
   823  0726  390F               	andlw	15
   824  0727  1283               	bcf	3,5	;RP0=0, select bank0
   825  0728  1303               	bcf	3,6	;RP1=0, select bank0
   826  0729  0088               	movwf	8	;volatile
   827  072A                     l674:
   828                           
   829                           ;LCD16x2.c: 19:     LCD_delay();PORTDbits.RD7 = 1;LCD_delay();PORTDbits.RD7 = 0;LCD_dela
      +                          y();
   830  072A  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   831  072F                     l676:
   832  072F  1283               	bcf	3,5	;RP0=0, select bank0
   833  0730  1303               	bcf	3,6	;RP1=0, select bank0
   834  0731  1788               	bsf	8,7	;volatile
   835  0732                     l678:
   836  0732  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   837  0737                     l680:
   838  0737  1283               	bcf	3,5	;RP0=0, select bank0
   839  0738  1303               	bcf	3,6	;RP1=0, select bank0
   840  0739  1388               	bcf	8,7	;volatile
   841  073A                     l682:
   842  073A  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   843  073F                     l49:
   844  073F  0008               	return
   845  0740                     __end_of_escribir_comando:
   846                           
   847                           	psect	text4
   848  0682                     __ptext4:	
   849 ;; *************** function _escribir_cadena *****************
   850 ;; Defined at:
   851 ;;		line 27 in file "LCD16x2.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;  cadena          1    wreg     PTR unsigned char 
   854 ;;		 -> STR_1(9), 
   855 ;; Auto vars:     Size  Location     Type
   856 ;;  cadena          1    3[COMMON] PTR unsigned char 
   857 ;;		 -> STR_1(9), 
   858 ;;  i               1    4[COMMON] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   868 ;;      Params:         0       0       0       0       0
   869 ;;      Locals:         2       0       0       0       0
   870 ;;      Temps:          1       0       0       0       0
   871 ;;      Totals:         3       0       0       0       0
   872 ;;Total ram usage:        3 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; Hardware stack levels required when called: 2
   875 ;; This function calls:
   876 ;;		_escribir_caracter
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882  0682                     _escribir_cadena:	
   883                           ;psect for function _escribir_cadena
   884                           
   885                           
   886                           ;incstack = 0
   887                           ; Regs used in _escribir_cadena: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   888                           ;escribir_cadena@cadena stored from wreg
   889  0682  00FB               	movwf	escribir_cadena@cadena
   890  0683                     l798:
   891                           
   892                           ;LCD16x2.c: 28:     char i = 0;
   893  0683  01FC               	clrf	escribir_cadena@i
   894                           
   895                           ;LCD16x2.c: 29:     while(cadena[i]!=0) {
   896  0684  2E96               	goto	l804
   897  0685                     l800:
   898                           
   899                           ;LCD16x2.c: 30:  escribir_caracter(cadena[i]);
   900  0685  087C               	movf	escribir_cadena@i,w
   901  0686  077B               	addwf	escribir_cadena@cadena,w
   902  0687  0084               	movwf	4
   903  0688  120A  118A  2003  120A  118A  	fcall	stringdir
   904  068D  120A  118A  2740  120A  118A  	fcall	_escribir_caracter
   905  0692                     l802:
   906                           
   907                           ;LCD16x2.c: 31:  i++;
   908  0692  3001               	movlw	1
   909  0693  00FA               	movwf	??_escribir_cadena
   910  0694  087A               	movf	??_escribir_cadena,w
   911  0695  07FC               	addwf	escribir_cadena@i,f
   912  0696                     l804:
   913                           
   914                           ;LCD16x2.c: 29:     while(cadena[i]!=0) {
   915  0696  087C               	movf	escribir_cadena@i,w
   916  0697  077B               	addwf	escribir_cadena@cadena,w
   917  0698  0084               	movwf	4
   918  0699  120A  118A  2003  120A  118A  	fcall	stringdir
   919  069E  3A00               	xorlw	0
   920  069F  1D03               	skipz
   921  06A0  2EA2               	goto	u61
   922  06A1  2EA3               	goto	u60
   923  06A2                     u61:
   924  06A2  2E85               	goto	l800
   925  06A3                     u60:
   926  06A3                     l58:
   927  06A3  0008               	return
   928  06A4                     __end_of_escribir_cadena:
   929                           
   930                           	psect	text5
   931  0740                     __ptext5:	
   932 ;; *************** function _escribir_caracter *****************
   933 ;; Defined at:
   934 ;;		line 21 in file "LCD16x2.c"
   935 ;; Parameters:    Size  Location     Type
   936 ;;  caracter        1    wreg     unsigned char 
   937 ;; Auto vars:     Size  Location     Type
   938 ;;  caracter        1    1[COMMON] unsigned char 
   939 ;; Return value:  Size  Location     Type
   940 ;;                  1    wreg      void 
   941 ;; Registers used:
   942 ;;		wreg, status,2, status,0, pclath, cstack
   943 ;; Tracked objects:
   944 ;;		On entry : 0/0
   945 ;;		On exit  : 0/0
   946 ;;		Unchanged: 0/0
   947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   948 ;;      Params:         0       0       0       0       0
   949 ;;      Locals:         1       0       0       0       0
   950 ;;      Temps:          1       0       0       0       0
   951 ;;      Totals:         2       0       0       0       0
   952 ;;Total ram usage:        2 bytes
   953 ;; Hardware stack levels used: 1
   954 ;; Hardware stack levels required when called: 1
   955 ;; This function calls:
   956 ;;		_LCD_delay
   957 ;; This function is called by:
   958 ;;		_main
   959 ;;		_escribir_cadena
   960 ;;		_escribir_caracter_especial
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964  0740                     _escribir_caracter:	
   965                           ;psect for function _escribir_caracter
   966                           
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _escribir_caracter: [wreg+status,2+status,0+pclath+cstack]
   970                           ;escribir_caracter@caracter stored from wreg
   971  0740  00F9               	movwf	escribir_caracter@caracter
   972  0741                     l684:
   973                           
   974                           ;LCD16x2.c: 22:     PORTD = (caracter>>4)&0x0F;
   975  0741  0879               	movf	escribir_caracter@caracter,w
   976  0742  00F8               	movwf	??_escribir_caracter
   977  0743  3004               	movlw	4
   978  0744                     u25:
   979  0744  1003               	clrc
   980  0745  0CF8               	rrf	??_escribir_caracter,f
   981  0746  3EFF               	addlw	-1
   982  0747  1D03               	skipz
   983  0748  2F44               	goto	u25
   984  0749  0878               	movf	??_escribir_caracter,w
   985  074A  390F               	andlw	15
   986  074B  1283               	bcf	3,5	;RP0=0, select bank0
   987  074C  1303               	bcf	3,6	;RP1=0, select bank0
   988  074D  0088               	movwf	8	;volatile
   989  074E                     l686:
   990                           
   991                           ;LCD16x2.c: 23:     PORTDbits.RD5 = 1; LCD_delay();PORTDbits.RD7 = 1;LCD_delay();PORTDbi
      +                          ts.RD7 = 0;LCD_delay();PORTDbits.RD5 = 0;
   992  074E  1688               	bsf	8,5	;volatile
   993  074F                     l688:
   994  074F  120A  118A  264E  120A  118A  	fcall	_LCD_delay
   995  0754                     l690:
   996  0754  1283               	bcf	3,5	;RP0=0, select bank0
   997  0755  1303               	bcf	3,6	;RP1=0, select bank0
   998  0756  1788               	bsf	8,7	;volatile
   999  0757                     l692:
  1000  0757  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1001  075C                     l694:
  1002  075C  1283               	bcf	3,5	;RP0=0, select bank0
  1003  075D  1303               	bcf	3,6	;RP1=0, select bank0
  1004  075E  1388               	bcf	8,7	;volatile
  1005  075F                     l696:
  1006  075F  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1007  0764                     l698:
  1008  0764  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0765  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0766  1288               	bcf	8,5	;volatile
  1011  0767                     l700:
  1012                           
  1013                           ;LCD16x2.c: 24:     PORTD = (caracter)&0x0F;
  1014  0767  0879               	movf	escribir_caracter@caracter,w
  1015  0768  390F               	andlw	15
  1016  0769  0088               	movwf	8	;volatile
  1017  076A                     l702:
  1018                           
  1019                           ;LCD16x2.c: 25:     PORTDbits.RD5 = 1;LCD_delay();PORTDbits.RD7 = 1;LCD_delay();PORTDbit
      +                          s.RD7 = 0;LCD_delay();PORTDbits.RD5 = 0;
  1020  076A  1688               	bsf	8,5	;volatile
  1021  076B                     l704:
  1022  076B  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1023  0770                     l706:
  1024  0770  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0771  1303               	bcf	3,6	;RP1=0, select bank0
  1026  0772  1788               	bsf	8,7	;volatile
  1027  0773                     l708:
  1028  0773  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1029  0778                     l710:
  1030  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1032  077A  1388               	bcf	8,7	;volatile
  1033  077B                     l712:
  1034  077B  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1035  0780                     l714:
  1036  0780  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0781  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0782  1288               	bcf	8,5	;volatile
  1039  0783                     l52:
  1040  0783  0008               	return
  1041  0784                     __end_of_escribir_caracter:
  1042                           
  1043                           	psect	text6
  1044  066B                     __ptext6:	
  1045 ;; *************** function _LCD_Init *****************
  1046 ;; Defined at:
  1047 ;;		line 8 in file "LCD16x2.c"
  1048 ;; Parameters:    Size  Location     Type
  1049 ;;		None
  1050 ;; Auto vars:     Size  Location     Type
  1051 ;;		None
  1052 ;; Return value:  Size  Location     Type
  1053 ;;                  1    wreg      void 
  1054 ;; Registers used:
  1055 ;;		wreg, status,2, status,0, pclath, cstack
  1056 ;; Tracked objects:
  1057 ;;		On entry : 0/0
  1058 ;;		On exit  : 0/0
  1059 ;;		Unchanged: 0/0
  1060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1061 ;;      Params:         0       0       0       0       0
  1062 ;;      Locals:         0       0       0       0       0
  1063 ;;      Temps:          0       0       0       0       0
  1064 ;;      Totals:         0       0       0       0       0
  1065 ;;Total ram usage:        0 bytes
  1066 ;; Hardware stack levels used: 1
  1067 ;; Hardware stack levels required when called: 1
  1068 ;; This function calls:
  1069 ;;		_LCD_delay
  1070 ;; This function is called by:
  1071 ;;		_main
  1072 ;; This function uses a non-reentrant model
  1073 ;;
  1074                           
  1075  066B                     _LCD_Init:	
  1076                           ;psect for function _LCD_Init
  1077                           
  1078  066B                     l750:	
  1079                           ;incstack = 0
  1080                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1081                           
  1082                           
  1083                           ;LCD16x2.c: 9:     TRISD = 0x00;
  1084  066B  1683               	bsf	3,5	;RP0=1, select bank1
  1085  066C  1303               	bcf	3,6	;RP1=0, select bank1
  1086  066D  0188               	clrf	8	;volatile
  1087                           
  1088                           ;LCD16x2.c: 10:     PORTD = 0x00;
  1089  066E  1283               	bcf	3,5	;RP0=0, select bank0
  1090  066F  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0670  0188               	clrf	8	;volatile
  1092  0671                     l752:
  1093                           
  1094                           ;LCD16x2.c: 11:     PORTD = 0b00000010;
  1095  0671  3002               	movlw	2
  1096  0672  0088               	movwf	8	;volatile
  1097  0673                     l754:
  1098                           
  1099                           ;LCD16x2.c: 12:     PORTDbits.RD7 = 1;LCD_delay();
  1100  0673  1788               	bsf	8,7	;volatile
  1101  0674                     l756:
  1102  0674  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1103  0679                     l758:
  1104                           
  1105                           ;LCD16x2.c: 13:     PORTDbits.RD7 = 0;LCD_delay();
  1106  0679  1283               	bcf	3,5	;RP0=0, select bank0
  1107  067A  1303               	bcf	3,6	;RP1=0, select bank0
  1108  067B  1388               	bcf	8,7	;volatile
  1109  067C                     l760:
  1110  067C  120A  118A  264E  120A  118A  	fcall	_LCD_delay
  1111  0681                     l46:
  1112  0681  0008               	return
  1113  0682                     __end_of_LCD_Init:
  1114                           
  1115                           	psect	text7
  1116  064E                     __ptext7:	
  1117 ;; *************** function _LCD_delay *****************
  1118 ;; Defined at:
  1119 ;;		line 5 in file "LCD16x2.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		None
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels used: 1
  1139 ;; This function calls:
  1140 ;;		Nothing
  1141 ;; This function is called by:
  1142 ;;		_LCD_Init
  1143 ;;		_escribir_comando
  1144 ;;		_escribir_caracter
  1145 ;;		_leer_direccion_DDRAM
  1146 ;; This function uses a non-reentrant model
  1147 ;;
  1148                           
  1149  064E                     _LCD_delay:	
  1150                           ;psect for function _LCD_delay
  1151                           
  1152  064E                     l658:	
  1153                           ;incstack = 0
  1154                           ; Regs used in _LCD_delay: []
  1155                           
  1156                           
  1157                           ;LCD16x2.c: 6:     _delay((unsigned long)((1)*(4000000/4000000.0)));
  1158  064E  0000               	nop
  1159  064F                     l43:
  1160  064F  0008               	return
  1161  0650                     __end_of_LCD_delay:
  1162  007E                     btemp	set	126	;btemp
  1163  007E                     wtemp0	set	126
  1164                           
  1165                           	psect	idloc
  1166                           
  1167                           ;Config register IDLOC0 @ 0x2000
  1168                           ;	unspecified, using default values
  1169  2000                     	org	8192
  1170  2000  3FFF               	dw	16383
  1171                           
  1172                           ;Config register IDLOC1 @ 0x2001
  1173                           ;	unspecified, using default values
  1174  2001                     	org	8193
  1175  2001  3FFF               	dw	16383
  1176                           
  1177                           ;Config register IDLOC2 @ 0x2002
  1178                           ;	unspecified, using default values
  1179  2002                     	org	8194
  1180  2002  3FFF               	dw	16383
  1181                           
  1182                           ;Config register IDLOC3 @ 0x2003
  1183                           ;	unspecified, using default values
  1184  2003                     	org	8195
  1185  2003  3FFF               	dw	16383
  1186                           
  1187                           	psect	config
  1188                           
  1189                           ;Config register CONFIG @ 0x2007
  1190                           ;	Oscillator Selection bits
  1191                           ;	FOSC = XT, XT oscillator
  1192                           ;	Watchdog Timer Enable bit
  1193                           ;	WDTE = OFF, WDT disabled
  1194                           ;	Power-up Timer Enable bit
  1195                           ;	PWRTE = ON, PWRT enabled
  1196                           ;	Brown-out Reset Enable bit
  1197                           ;	BOREN = ON, BOR enabled
  1198                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1199                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1200                           ;	Data EEPROM Memory Code Protection bit
  1201                           ;	CPD = OFF, Data EEPROM code protection off
  1202                           ;	Flash Program Memory Write Enable bits
  1203                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1204                           ;	In-Circuit Debugger Mode bit
  1205                           ;	DEBUG = 0x1, unprogrammed default
  1206                           ;	Flash Program Memory Code Protection bit
  1207                           ;	CP = OFF, Code protection off
  1208  2007                     	org	8199
  1209  2007  3F71               	dw	16241

Data Sizes:
    Strings     9
    Constant    0
    Data        8
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      14
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    escribir_caracter_especial@DirCGRAM	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    escribir_cadena@cadena	PTR unsigned char  size(1) Largest target is 9
		 -> STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_escribir_cadena
    _main->_escribir_caracter_especial
    _escribir_caracter_especial->_escribir_caracter
    _escribir_caracter_especial->_escribir_comando
    _escribir_caracter_especial->_leer_direccion_DDRAM
    _escribir_cadena->_escribir_caracter

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     378
                           _LCD_Init
                    _escribir_cadena
                  _escribir_caracter
         _escribir_caracter_especial
                   _escribir_comando
               _leer_direccion_DDRAM
 ---------------------------------------------------------------------------------
 (1) _escribir_caracter_especial                           3     3      0     165
                                              2 COMMON     3     3      0
                  _escribir_caracter
                   _escribir_comando
               _leer_direccion_DDRAM
 ---------------------------------------------------------------------------------
 (1) _leer_direccion_DDRAM                                 2     2      0       0
                                              0 COMMON     2     2      0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (1) _escribir_comando                                     2     2      0      30
                                              0 COMMON     2     2      0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (1) _escribir_cadena                                      3     3      0     153
                                              2 COMMON     3     3      0
                  _escribir_caracter
 ---------------------------------------------------------------------------------
 (2) _escribir_caracter                                    2     2      0      30
                                              0 COMMON     2     2      0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0       0
                          _LCD_delay
 ---------------------------------------------------------------------------------
 (2) _LCD_delay                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_delay
   _escribir_cadena
     _escribir_caracter
       _LCD_delay
   _escribir_caracter
   _escribir_caracter_especial
     _escribir_caracter
     _escribir_comando
       _LCD_delay
     _leer_direccion_DDRAM
       _LCD_delay
   _escribir_comando
   _leer_direccion_DDRAM

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       0       5        0.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       E      12        0.0%
ABS                  0      0       E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Apr 28 13:34:49 2022

                                 pc 0002                                  l25 06FE  
                                l26 06FE                                  l43 064F  
                                l52 0783                                  l61 07CA  
                                l46 0681                                  l49 073F  
                                l58 06A3                                  l66 06D2  
                                u15 0706                                  u25 0744  
                                u50 06CB                                  u35 079E  
                                u51 06CA                                  u60 06A3  
                                u61 06A2                                  fsr 0004  
                               l700 0767                                 l710 0778  
                               l702 076A                                 l712 077B  
                               l704 076B                                 l800 0685  
                               l720 078B                                 l714 0780  
                               l706 0770                                 l802 0692  
                               l730 07AA                                 l722 0790  
                               l810 06DB                                 l708 0773  
                               l804 0696                                 l660 0703  
                               l740 07C0                                 l732 07AF  
                               l724 0793                                 l716 0784  
                               l812 06E4                                 l750 066B  
                               l670 0720                                 l662 0710  
                               l742 07C1                                 l734 07B2  
                               l726 0798                                 l718 0788  
                               l814 06EA                                 l806 06D3  
                               l760 067C                                 l752 0671  
                               l680 0737                                 l672 0725  
                               l664 0715                                 l744 07C6  
                               l736 07B7                                 l728 07A9  
                               l808 06D8                                 l658 064E  
                               l754 0673                                 l690 0754  
                               l682 073A                                 l674 072A  
                               l666 0718                                 l746 07C9  
                               l738 07BF                                 l770 06A5  
                               l756 0674                                 l692 0757  
                               l684 0741                                 l676 072F  
                               l668 071D                                 l780 06B8  
                               l772 06AD                                 l758 0679  
                               l694 075C                                 l686 074E  
                               l678 0732                                 l782 06C1  
                               l774 06B7                                 l696 075F  
                               l688 074F                                 l784 06C5  
                               l698 0764                                 l786 06CB  
                               l798 0683                                 fsr0 0004  
                               indf 0000                                STR_1 0009  
                              _main 06D3                                btemp 007E  
__end_of_escribir_caracter_especial 06D3          _escribir_caracter_especial 06A4  
                              start 0000                _leer_direccion_DDRAM 0784  
escribir_caracter_especial@DirCGRAM 007B                    __end_of_LCD_Init 0682  
                             ?_main 0078                               _PORTB 0006  
                             _PORTD 0008                               _TRISB 0086  
                             _TRISD 0088                               pclath 000A  
                             status 0003                               wtemp0 007E  
             ?_leer_direccion_DDRAM 0078                     __initialization 07CB  
                      __end_of_main 0702            __end_of_escribir_comando 0740  
                            ??_main 007D                   __end_of_LCD_delay 0650  
                            _CGRAM1 0070                   ??_escribir_cadena 007A  
                      __pdataCOMMON 0070             __end_of__initialization 07FC  
                         ?_LCD_Init 0078              ??_leer_direccion_DDRAM 0078  
                    __pcstackCOMMON 0078                     _direccion_DDRAM 007D  
                        ??_LCD_Init 0078         ?_escribir_caracter_especial 0078  
                        __pmaintext 06D3                          __stringtab 0003  
                 ?_escribir_comando 0078                  ??_escribir_comando 0078  
                           __ptext1 06A4                             __ptext2 0784  
                           __ptext3 0702                             __ptext4 0682  
                           __ptext5 0740                             __ptext6 066B  
                           __ptext7 064E                           _LCD_delay 064E  
              end_of_initialization 07FC                     _escribir_cadena 0682  
                         _PORTDbits 0008                          ?_LCD_delay 0078  
             escribir_cadena@cadena 007B                       __pidataCOMMON 0650  
               start_initialization 07CB             __end_of_escribir_cadena 06A4  
                        init_fetch0 0658                         __pbssCOMMON 007D  
                         ___latbits 0002                         ??_LCD_delay 0078  
                         __pstrings 0003             escribir_comando@comando 0079  
       escribir_caracter_especial@i 007C                    ?_escribir_cadena 0078  
                          _LCD_Init 066B                         __stringbase 0008  
                 _escribir_caracter 0740                  ?_escribir_caracter 0078  
                __end_of__stringtab 0009                 ??_escribir_caracter 0078  
         __end_of_escribir_caracter 0784        ??_escribir_caracter_especial 007A  
      __end_of_leer_direccion_DDRAM 07CB                            init_ram0 065C  
                  _escribir_comando 0702                           stringcode 0003  
                  escribir_cadena@i 007C                            stringdir 0003  
                          stringtab 0003           escribir_caracter@caracter 0079  
